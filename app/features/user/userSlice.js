const createSlice = require('@reduxjs/toolkit').createSlice
const createAsyncThunk = require('@reduxjs/toolkit').createAsyncThunk
const axios = require('axios')

const initialState = {
    loading: false,
    users: [],
    error: '',
}

// The asyncThunk method creates all the lifeCycle methods itself
// asyncThunk generates the pending , fulfilled and rejected action types itself
// We can listen to these action types in the reducer function and perform state mutations
// These reducers though are not generated by the slice and are to be added as extra reducers

// The createAsyncThunk accepts two arguments  
// The first is action name and the second is a callback that accepts the payload 
const fetchUsers = createAsyncThunk('user/fetchUsers', () => {
    // This returns a promise so we add a .then block
     return axios.get('https://jsonplaceholder.typicode.com/users')
        .then(response => response.data.map((user) => user.id))
})

// We will add the extra reducers for asyncthunk here 
const userSlice = createSlice({
    name: 'user',
    initialState,
    extraReducers: (builder) => {
        builder.addCase(fetchUsers.pending, state => {
            state.loading = true
        })
        builder.addCase(fetchUsers.fulfilled, (state, action) => {
            state.loading = false
            state.users = action.payload
            error = ''
        })
        builder.addCase(fetchUsers.rejected, (state, action) => {
            state.loading = false
            state.users = []
            state.error = action.error.message
        })
    }
})

module.exports = userSlice.reducer
module.exports.fetchUsers = fetchUsers